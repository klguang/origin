version: "3"

volumes:
  ipfs:

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    logging:
      driver: none

  origin-dapp:
    container_name: origin-dapp
    image: origin
    depends_on:
      - origin-messaging
    volumes: &volumes
      # origin-contracts build directory, the DApp will run a contract deploy
      # and the contract address here, and other services will then parse these
      # build files to extract contract addresses
      - ./origin-contracts/build:/app/origin-contracts/build
      # if new origin module is added the whole container does not need to be rebuilt
      - ./lerna.json:/app/lerna.json
      # Mount source code for all packages from host
      - ./origin-dapp/:/app/origin-dapp/
      - ./origin-services/:/app/origin-services/
      - ./origin-graphql/:/app/origin-graphql/
      - ./origin-eventsource/:/app/origin-eventsource/
      - ./origin-ipfs/:/app/origin-ipfs/
      - ./origin-messaging-client/:/app/origin-messaging-client/
      - ./origin-linker-client/:/app/origin-linker-client/
      - ./origin-validator:/app/origin-validator/
      - ./origin-bridge/:/app/origin-bridge/
      - ./origin-discovery/:/app/origin-discovery/
      - ./origin-ipfs-proxy/:/app/origin-ipfs-proxy/
      - ./origin-messaging/:/app/origin-messaging/
      - ./origin-notifications/:/app/origin-notifications/
      - ./origin-growth/:/app/origin-growth/
      - ./origin-identity/:/app/origin-identity/
      - ./origin-token/:/app/origin-token/
    # Required by the dapp translation plugin
      - ./origin-dapp/translations:/app/origin-dapp/translations
    # Exclude all node_modules
      - /app/origin-dapp/node_modules/
      - /app/origin-services/node_modules/
      - /app/origin-graphql/node_modules/
      - /app/origin-eventsource/node_modules/
      - /app/origin-ipfs/node_modules/
      - /app/origin-messaging-client/node_modules/
      - /app/origin-linker-client/node_modules/
      - /app/origin-validator/node_modules/
      - /app/origin-bridge/node_modules/
      - /app/origin-discovery/node_modules/
      - /app/origin-ipfs-proxy/node_modules/
      - /app/origin-messaging/node_modules/
      - /app/origin-notifications/node_modules/
      - /app/origin-growth/node_modules/
      - /app/origin-token/node_modules/
      - /app/origin-identity/node_modules/
    # IPFS data
      - ipfs:/app/ipfs
    ports:
      - "3000:3000"
      - "8083:8083" # Webpack
      - "8545:8545"
      - "8080:8080"
    environment:
      - DEPLOY_CONTRACTS=true
      - DOCKER=true
      - ENABLE_GROWTH=true
    command:
      # Waits for origin-messaging to start then uses a script to read the
      # origin-messaging IPFS peer id and export the IPFS_SWARM variable
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-messaging:9012 &&
      . set-ipfs-swarm.sh /app/ipfs/config &&
      npm run start --prefix origin-dapp"

  origin-messaging:
    container_name: origin-messaging
    image: origin
    build:
      context: .
      dockerfile: Dockerfile
    volumes: *volumes
    environment:
      - MESSAGING_NAMESPACE=dev
      - IPFS_REPO_PATH=/app/ipfs
    ports:
      - "9012:9012"
      - "6647:6647"
    command: npm run start --prefix origin-messaging

  origin-ipfs-proxy:
    container_name: origin-ipfs-proxy
    image: origin
    volumes: *volumes
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://origin-dapp:5002
      - IPFS_GATEWAY_URL=http://origin-dapp:8080
    command: npm run start --prefix origin-ipfs-proxy

  origin-event-listener:
    container_name: origin-event-listener
    image: origin
    volumes: *volumes
    environment:
      - ARBITRATOR_ACCOUNT=0x821aEa9a577a9b44299B9c15c88cf3087F3b5544
      - AFFILIATE_ACCOUNT=0x0d1d4e623D10F9FBA5Db95830F7d3839406C6AF2
      - ATTESTATION_ACCOUNT=0x99C03fBb0C995ff1160133A8bd210D0E77bCD101
      - INDEX_MARKETPLACE=true
      - INDEX_IDENTITY=true
      - INDEX_GROWTH=true
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH=true
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - IPFS_URL=http://origin-ipfs-proxy:9999
      - WEB3_URL=http://origin-dapp:8545
    depends_on:
      - postgres
      - elasticsearch
      - origin-dapp
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-dapp:3000 --
      wait-for.sh -t 0 -q elasticsearch:9200 --
      npm run migrate --prefix origin-discovery &&
      npm run migrate --prefix origin-growth &&
      npm run migrate --prefix origin-identity &&
      npm run start:listener --prefix origin-discovery"

  origin-discovery:
    container_name: origin-discovery
    image: origin
    volumes: *volumes
    environment:
      - ARBITRATOR_ACCOUNT=0x821aEa9a577a9b44299B9c15c88cf3087F3b5544
      - AFFILIATE_ACCOUNT=0x0d1d4e623D10F9FBA5Db95830F7d3839406C6AF2
      - ATTESTATION_ACCOUNT=0x99C03fBb0C995ff1160133A8bd210D0E77bCD101
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - IPFS_URL=http://origin-ipfs-proxy:9999
      - WEB3_URL=http://origin-dapp:8545
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "4000:4000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-dapp:3000 &&
      npm run start:discovery --prefix origin-discovery"

  origin-notifications:
    container_name: origin-notifications
    image: origin
    volumes: *volumes
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    ports:
      - "3456:3456"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run migrate --prefix origin-notifications &&
      npm run start --prefix origin-notifications"

  origin-growth:
    container_name: origin-growth
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    depends_on:
      - postgres
    ports:
      - "4001:4001"
    #command: sleep infinity
    command: npm run start --prefix origin-growth

  origin-bridge:
    container_name: origin-bridge
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run migrate --prefix origin-bridge &&
      npm run start --prefix origin-bridge"
